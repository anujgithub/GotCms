<?php
/**
 * This source file is part of GotCms.
 *
 * GotCms is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GotCms is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along
 * with GotCms. If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>.
 *
 * PHP Version >=5.3
 *
 * @category Gc_Tests
 * @package  ZfModules
 * @author   Pierre Rambaud (GoT) <pierre.rambaud86@gmail.com>
 * @license  GNU/LGPL http://www.gnu.org/licenses/lgpl-3.0.html
 * @link     http://www.got-cms.com
 */

namespace Application\Controller;

use Gc\Core\Config as CoreConfig;
use Gc\Datatype\Model as DatatypeModel;
use Gc\Document\Model as DocumentModel;
use Gc\DocumentType\Model as DocumentTypeModel;
use Gc\Layout\Model as LayoutModel;
use Gc\Property\Model as PropertyModel;
use Gc\Tab\Model as TabModel;
use Gc\User\Model as UserModel;
use Gc\View\Model as ViewModel;
use Gc\Test\PHPUnit\Controller\AbstractHttpControllerTestCase;
use Zend\Authentication\AuthenticationService;
use Zend\Authentication\Storage;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-15 at 23:51:29.
 *
 * @group    ZfModules
 * @category Gc_Tests
 * @package  ZfModules
 */
class IndexControllerTest extends AbstractHttpControllerTestCase
{
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    public function setUp()
    {
        $this->init();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    public function tearDown()
    {
    }

    /**
     * Test
     *
     * @covers Application\Controller\IndexController::indexAction
     * @covers Application\Controller\IndexController::loadTabs
     * @covers Application\Controller\IndexController::loadProperties
     * @covers Application\Controller\IndexController::explodePath
     * @covers Application\Controller\IndexController::isSerialized
     * @covers Application\Controller\IndexController::enableCache
     *
     * @return void
     */
    public function testIndexAction()
    {
        $this->dispatch('/test');
        $this->assertResponseStatusCode(200);

        $this->assertModuleName('Application');
        $this->assertControllerName('IndexController');
        $this->assertControllerClass('IndexController');
        $this->assertMatchedRouteName('cms');
    }

    /**
     * Test
     *
     * @covers Application\Controller\IndexController::indexAction
     * @covers Application\Controller\IndexController::loadTabs
     * @covers Application\Controller\IndexController::loadProperties
     * @covers Application\Controller\IndexController::explodePath
     * @covers Application\Controller\IndexController::isSerialized
     * @covers Application\Controller\IndexController::enableCache
     *
     * @return void
     */
    public function testIndexActionWithUrlKey()
    {
        $this->dispatch('/test/test');
        $this->assertResponseStatusCode(200);

        $this->assertModuleName('Application');
        $this->assertControllerName('IndexController');
        $this->assertControllerClass('IndexController');
        $this->assertMatchedRouteName('cms');
    }

    /**
     * Test
     *
     * @covers Application\Controller\IndexController::indexAction
     * @covers Application\Controller\IndexController::loadTabs
     * @covers Application\Controller\IndexController::loadProperties
     * @covers Application\Controller\IndexController::explodePath
     * @covers Application\Controller\IndexController::isSerialized
     * @covers Application\Controller\IndexController::enableCache
     *
     * @return void
     */
    public function testIndexActionWithCache()
    {
        $this->dispatch('/test');
        $this->assertResponseStatusCode(200);

        $this->assertModuleName('Application');
        $this->assertControllerName('IndexController');
        $this->assertControllerClass('IndexController');
        $this->assertMatchedRouteName('cms');
    }

    /**
     * Test
     *
     * @covers Application\Controller\IndexController::indexAction
     * @covers Application\Controller\IndexController::loadTabs
     * @covers Application\Controller\IndexController::loadProperties
     * @covers Application\Controller\IndexController::explodePath
     * @covers Application\Controller\IndexController::isSerialized
     * @covers Application\Controller\IndexController::enableCache
     *
     * @return void
     */
    public function testIndexActionWithExistingCache()
    {
        $this->dispatch('/test');
        $this->assertResponseStatusCode(200);

        $this->assertModuleName('Application');
        $this->assertControllerName('IndexController');
        $this->assertControllerClass('IndexController');
        $this->assertMatchedRouteName('cms');
    }

    /**
     * Test
     *
     * @covers Application\Controller\IndexController::indexAction
     * @covers Application\Controller\IndexController::loadTabs
     * @covers Application\Controller\IndexController::loadProperties
     * @covers Application\Controller\IndexController::explodePath
     * @covers Application\Controller\IndexController::isSerialized
     * @covers Application\Controller\IndexController::enableCache
     *
     * @return void
     */
    public function testIndexActionWithUrlKeyWithPreview()
    {
        $this->dispatch('/test?preview');
        $this->assertResponseStatusCode(200);

        $this->assertModuleName('Application');
        $this->assertControllerName('IndexController');
        $this->assertControllerClass('IndexController');
        $this->assertMatchedRouteName('cms');
    }

    /**
     * Test
     *
     * @covers Application\Controller\IndexController::indexAction
     * @covers Application\Controller\IndexController::loadTabs
     * @covers Application\Controller\IndexController::loadProperties
     * @covers Application\Controller\IndexController::explodePath
     * @covers Application\Controller\IndexController::isSerialized
     * @covers Application\Controller\IndexController::enableCache
     *
     * @return void
     */
    public function testIndexActionWith404Page()
    {
        $this->dispatch('/404Page');
        $this->assertResponseStatusCode(404);

        $this->assertModuleName('Application');
        $this->assertControllerName('IndexController');
        $this->assertControllerClass('IndexController');
        $this->assertMatchedRouteName('cms');
    }

    /**
     * Test
     *
     * @covers Application\Controller\IndexController::indexAction
     * @covers Application\Controller\IndexController::loadTabs
     * @covers Application\Controller\IndexController::loadProperties
     * @covers Application\Controller\IndexController::explodePath
     * @covers Application\Controller\IndexController::isSerialized
     * @covers Application\Controller\IndexController::enableCache
     *
     * @return void
     */
    public function testIndexActionWith404PageAndNotEmptyContent()
    {
        $this->dispatch('/404Page');
        $this->assertResponseStatusCode(404);

        $this->assertModuleName('Application');
        $this->assertControllerName('IndexController');
        $this->assertControllerClass('IndexController');
        $this->assertMatchedRouteName('cms');
    }
}
