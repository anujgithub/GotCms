<?php
/**
 * This source file is part of GotCms.
 *
 * GotCms is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GotCms is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along
 * with GotCms. If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>.
 *
 * PHP Version >=5.3
 *
 * @category Gc_Tests
 * @package  Library
 * @author   Pierre Rambaud (GoT) <pierre.rambaud86@gmail.com>
 * @license  GNU/LGPL http://www.gnu.org/licenses/lgpl-3.0.html
 * @link     http://www.got-cms.com
 */

namespace Gc\Property;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-17 at 20:40:11.
 *
 * @group Gc
 * @category Gc_Tests
 * @package  Library
 */
class ModelTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Model
     *
     * @return void
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->object = Model::fromArray(
            array(
                'name' => 'DatatypeTest',
                'identifier' => 'DatatypeTest',
                'description' => 'DatatypeTest',
                'required' => false,
                'sort_order' => 1,
                'tab_id' => $this->tab->getId(),
                'datatype_id' => $this->datatype->getId(),
            )
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    protected function tearDown()
    {
        unset($this->object);
    }

    /**
     * Test
     *
     * @covers Gc\Property\Model::isRequired
     *
     * @return void
     */
    public function testIsRequired()
    {
        $this->assertFalse($this->object->isRequired());
        $this->assertInstanceOf('Gc\Property\Model', $this->object->isRequired(true));
        $this->assertTrue($this->object->isRequired());
        $this->assertInstanceOf('Gc\Property\Model', $this->object->isRequired(false));
        $this->assertFalse($this->object->isRequired());
    }

    /**
     * Test
     *
     * @covers Gc\Property\Model::setValue
     * @covers Gc\Property\Model::loadValue
     *
     * @return void
     */
    public function testSetValue()
    {
        $this->assertInstanceOf('Gc\Property\Model', $this->object->setValue('string'));
    }

    /**
     * Test
     *
     * @covers Gc\Property\Model::loadValue
     *
     * @return void
     */
    public function testLoadValue()
    {
        $this->assertInstanceOf('Gc\Property\Model', $this->object->loadValue());
    }

    /**
     * Test
     *
     * @covers Gc\Property\Model::getValue
     * @covers Gc\Property\Model::loadValue
     *
     * @return void
     */
    public function testGetValue()
    {
        $this->assertEquals('', $this->object->getValue());
        $this->object->setValue('string');
        $this->assertEquals('string', $this->object->getValue());
    }

    /**
     * Test
     *
     * @covers Gc\Property\Model::getValueModel
     *
     * @return void
     */
    public function testGetValueModel()
    {
        $this->assertInstanceOf('Gc\Property\Value\Model', $this->object->getValueModel());
    }

    /**
     * Test
     *
     * @covers Gc\Property\Model::saveValue
     *
     * @return void
     */
    public function testSaveValue()
    {
        $this->assertFalse($this->object->saveValue());
    }

    /**
     * Test
     *
     * @covers Gc\Property\Model::save
     *
     * @return void
     */
    public function testSave()
    {
        $this->assertInternalType('integer', (int) $this->object->save());
    }

    /**
     * Test
     *
     * @covers Gc\Property\Model::save
     *
     * @return void
     */
    public function testSaveWithWrongValues()
    {
        $this->setExpectedException('Gc\Exception');
        $this->object->setIdentifier(null);
        $this->assertFalse($this->object->save());
    }

    /**
     * Test
     *
     * @covers Gc\Property\Model::delete
     *
     * @return void
     */
    public function testDelete()
    {
        $this->assertTrue($this->object->delete());
    }

    /**
     * Test
     *
     * @covers Gc\Property\Model::delete
     *
     * @return void
     */
    public function testDeleteWithNoId()
    {
        $model = new Model();
        $this->assertFalse($model->delete());
    }

    /**
     * Test
     *
     * @covers Gc\Property\Model::fromArray
     *
     * @return void
     */
    public function testFromArray()
    {
        $model = Model::fromArray(
            array(
                'name' => 'DatatypeTest',
                'identifier' => 'DatatypeTest',
                'description' => 'DatatypeTest',
                'required' => false,
                'sort_order' => 1,
                'tab_id' => $this->tab->getId(),
                'datatype_id' => $this->datatype->getId(),
            )
        );
        $this->assertInstanceOf('Gc\Property\Model', $model);
    }

    /**
     * Test
     *
     * @covers Gc\Property\Model::fromId
     *
     * @return void
     */
    public function testFromId()
    {
        $this->assertInstanceOf('Gc\Property\Model', Model::fromId($this->object->getId()));
    }

    /**
     * Test
     *
     * @covers Gc\Property\Model::fromId
     *
     * @return void
     */
    public function testFromWithWrongId()
    {
        $this->assertFalse(Model::fromId('undefined'));
    }

    /**
     * Test
     *
     * @covers Gc\Property\Model::fromIdentifier
     *
     * @return void
     */
    public function testFromIdentifierWithNoDocumentId()
    {
        $this->assertFalse(Model::fromIdentifier($this->object->getIdentifier(), 0));
    }

    /**
     * Test
     *
     * @covers Gc\Property\Model::fromIdentifier
     *
     * @return void
     */
    public function testFromIdentifier()
    {
        $this->assertInstanceOf(
            'Gc\Property\Model',
            Model::fromIdentifier($this->object->getIdentifier(), 1)
        );
    }
}
