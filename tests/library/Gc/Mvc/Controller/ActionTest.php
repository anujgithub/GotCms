<?php
/**
 * This source file is part of GotCms.
 *
 * GotCms is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GotCms is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along
 * with GotCms. If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>.
 *
 * PHP Version >=5.3
 *
 * @category Gc_Tests
 * @package  Library
 * @author   Pierre Rambaud (GoT) <pierre.rambaud86@gmail.com>
 * @license  GNU/LGPL http://www.gnu.org/licenses/lgpl-3.0.html
 * @link     http://www.got-cms.com
 */

namespace Gc\Mvc\Controller;

use Gc\Registry;
use Gc\User\Model as UserModel;
use Zend\Http\Request;
use Zend\Mvc\Router\RouteMatch;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-17 at 20:40:11.
 *
 * @group Gc
 * @category Gc_Tests
 * @package  Library
 */
class ActionTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Action
     *
     * @return void
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->object = new Action;
        $this->object->setEvent(Registry::get('Application')->getMvcEvent());
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    protected function tearDown()
    {
        unset($this->object);
    }

    /**
     * Test
     *
     * @covers Gc\Mvc\Controller\Action::onDispatch
     * @covers Gc\Mvc\Controller\Action::init
     * @covers Gc\Mvc\Controller\Action::_construct
     *
     * @return void
     */
    public function testOnDispatchWithoutIdentity()
    {
        $this->object->getEvent()->setRouteMatch(new RouteMatch(array('controller' => 'controller')));
        $this->object->dispatch(Registry::get('Application')->getRequest(), null);

        $routeMatch = new RouteMatch(array());
        $routeMatch->setMatchedRouteName('content');
        $this->object->getEvent()->setRouteMatch($routeMatch);
        $this->object->onDispatch(Registry::get('Application')->getMvcEvent());
    }

    /**
     * Test
     *
     * @covers Gc\Mvc\Controller\Action::onDispatch
     * @covers Gc\Mvc\Controller\Action::init
     * @covers Gc\Mvc\Controller\Action::_construct
     *
     * @return void
     */
    public function testOnDispatchWithoutIdentityAndUserLoginRoute()
    {
        $routeMatch = new RouteMatch(
            array(
                'module' => 'Config',
                'controller' => 'UserController',
                'action' => 'login',
            )
        );
        $routeMatch->setMatchedRouteName('config/user/login');
        $this->object->getEvent()->setRouteMatch($routeMatch);
        $this->object->dispatch(Registry::get('Application')->getRequest());
    }

    /**
     * Test
     *
     * @covers Gc\Mvc\Controller\Action::onDispatch
     * @covers Gc\Mvc\Controller\Action::init
     * @covers Gc\Mvc\Controller\Action::_construct
     *
     * @return void
     */
    public function testOnDispatchWithoutIdentityAndLoginPage()
    {
        $this->object->getEvent()->setRouteMatch(new RouteMatch(array('controller' => 'controller')));
        $this->object->dispatch(Registry::get('Application')->getRequest(), null);

        $routeMatch = new RouteMatch(array());
        $routeMatch->setMatchedRouteName('content');
        $this->object->getEvent()->setRouteMatch($routeMatch);
        $this->object->onDispatch(Registry::get('Application')->getMvcEvent());
    }

    /**
     * Test
     *
     * @covers Gc\Mvc\Controller\Action::onDispatch
     * @covers Gc\Mvc\Controller\Action::init
     * @covers Gc\Mvc\Controller\Action::_construct
     *
     * @return void
     */
    public function testOnDispatchWithoutConfigFile()
    {
        $orig = GC_APPLICATION_PATH . '/config/autoload/global.php';
        $new  = GC_APPLICATION_PATH . '/config/autoload/fake-global.php';
        rename($orig, $new);
        $this->object->dispatch(Registry::get('Application')->getRequest(), null);
        rename($new, $orig);
    }

    /**
     * Test
     *
     * @covers Gc\Mvc\Controller\Action::onDispatch
     * @covers Gc\Mvc\Controller\Action::init
     * @covers Gc\Mvc\Controller\Action::_construct
     *
     * @return void
     */
    public function testOnDispatchWithIdentity()
    {
        $routeMatch = new RouteMatch(array());
        $routeMatch->setMatchedRouteName('cms');
        $this->object->getEvent()->setRouteMatch($routeMatch);
        $this->object->dispatch(Registry::get('Application')->getRequest(), null);
        $this->object->onDispatch(Registry::get('Application')->getMvcEvent());
    }

    /**
     * Test
     *
     * @covers Gc\Mvc\Controller\Action::getRouteMatch
     *
     * @return void
     */
    public function testGetRouteMatch()
    {
        $this->object->getEvent()->setRouteMatch(new RouteMatch(array('controller' => 'controller')));
        $this->assertInstanceOf('Zend\Mvc\Router\RouteMatch', $this->object->getRouteMatch());
    }

    /**
     * Test
     *
     * @covers Gc\Mvc\Controller\Action::getSession
     *
     * @return void
     */
    public function testGetSession()
    {
        $this->assertInstanceOf('Zend\Session\Container', $this->object->getSession());
    }

    /**
     * Test
     *
     * @covers Gc\Mvc\Controller\Action::getAuth
     *
     * @return void
     */
    public function testGetAuth()
    {
        $this->assertInstanceOf('Zend\Authentication\AuthenticationService', $this->object->getAuth());
    }

    /**
     * Test
     *
     * @covers Gc\Mvc\Controller\Action::returnJson
     *
     * @return void
     */
    public function testReturnJson()
    {
        $this->assertInstanceOf('Zend\View\Model\JsonModel', $this->object->returnJson(array()));
    }

    /**
     * Test
     *
     * @covers Gc\Mvc\Controller\Action::events
     *
     * @return void
     */
    public function testEvents()
    {
        $this->assertInstanceOf('Gc\Event\StaticEventManager', $this->object->events());
    }

    /**
     * Test
     *
     * @covers Gc\Mvc\Controller\Action::useFlashMessenger
     *
     * @return void
     */
    public function testUseflashMessenger()
    {
        $this->object->flashMessenger()->addInfoMessage('Test');
        $this->assertNull($this->object->useFlashMessenger(false));
        $this->assertNull($this->object->useFlashMessenger(true));
    }
}
