<?php
/**
 * This source file is part of GotCms.
 *
 * GotCms is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GotCms is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along
 * with GotCms. If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>.
 *
 * PHP Version >=5.3
 *
 * @category Gc_Tests
 * @package  Library
 * @author   Pierre Rambaud (GoT) <pierre.rambaud86@gmail.com>
 * @license  GNU/LGPL http://www.gnu.org/licenses/lgpl-3.0.html
 * @link     http://www.got-cms.com
 */

namespace Gc\Datatype;

use Gc\Datatype\Model as DatatypeModel;
use Gc\Document\Model as DocumentModel;
use Gc\DocumentType\Model as DocumentTypeModel;
use Gc\Layout\Model as LayoutModel;
use Gc\Property\Model as PropertyModel;
use Gc\Registry;
use Gc\User\Model as UserModel;
use Gc\View\Model as ViewModel;
use Gc\Tab\Model as TabModel;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-17 at 20:40:10.
 *
 * @group Gc
 * @category Gc_Tests
 * @package  Library
 */
class ModelTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Model
     *
     * @return void
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->object = Model::fromArray(
            array(
                'name' => 'ModelTest',
                'prevalue_value' => '',
                'description' => 'ModelTest',
                'model' => 'Textstring',
            )
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    protected function tearDown()
    {
        unset($this->object);
    }

    /**
     * Test
     *
     * @covers Gc\Datatype\Model::setPrevalueValue
     *
     * @return void
     */
    public function testSetPrevalueValue()
    {
        $this->object->setPrevalueValue('s:11:"string test";');
        $this->assertEquals('string test', $this->object->getPrevalueValue());
        $this->object->setPrevalueValue(array('array test'));
        $this->assertEquals(array('array test'), $this->object->getPrevalueValue());
    }

    /**
     * Test
     *
     * @covers Gc\Datatype\Model::fromArray
     *
     * @return void
     */
    public function testFromArray()
    {
        $this->assertInstanceOf(
            'Gc\Datatype\Model',
            $this->object->fromArray(
                array(
                    'name' => 'ModelTest',
                    'prevalue_value' => '',
                    'description' => 'ModelTest',
                    'model' => 'ModelTest',
                )
            )
        );
    }

    /**
     * Test
     *
     * @covers Gc\Datatype\Model::fromId
     *
     * @return void
     */
    public function testFromId()
    {

        $this->assertInstanceOf('Gc\Datatype\Model', Model::fromId($this->object->getId()));
        $this->assertFalse(Model::fromId('undefined id'));
    }

    /**
     * Test
     *
     * @covers Gc\Datatype\Model::save
     *
     * @return void
     */
    public function testSave()
    {
        $model = $this->object->fromArray(
            array(
                'name' => 'ModelTest',
                'prevalue_value' => '',
                'description' => 'ModelTest',
                'model' => 'ModelTest',
            )
        );
        $this->assertInternalType('integer', (int) $model->save());
        //Test update
        $this->assertInternalType('integer', (int) $model->save());
    }

    /**
     * Test
     *
     * @covers Gc\Datatype\Model::save
     *
     * @return void
     */
    public function testSaveWithWrongValues()
    {
        $this->setExpectedException('Gc\Exception');
        $model = $this->object->fromArray(
            array(
                'name' => 'ModelTest',
                'prevalue_value' => '',
                'description' => 'ModelTest',
            )
        );
        $this->assertFalse($model->save());
    }

    /**
     * Test
     *
     * @covers Gc\Datatype\Model::delete
     *
     * @return void
     */
    public function testDelete()
    {
        $this->assertTrue($this->object->delete());
    }

    /**
     * Test
     *
     * @covers Gc\Datatype\Model::delete
     *
     * @return void
     */
    public function testDeleteWithoutId()
    {
        $model = new Model();
        $this->assertFalse($model->delete());
    }

    /**
     * Test
     *
     * @covers Gc\Datatype\Model::delete
     *
     * @return void
     */
    public function testDeleteWithWrongValues()
    {
        $configuration = Registry::get('Application')->getConfig();
        if ($configuration['db']['driver'] == 'pdo_mysql') {
            $this->markTestSkipped('Mysql does not thrown exception.');
        }

        $this->setExpectedException('Gc\Exception');
        $model = new Model();
        $model->setId('undefined');
        $this->assertFalse($model->delete());
    }

    /**
     * Test
     *
     * @covers Gc\Datatype\Model::savePrevalueEditor
     *
     * @return void
     */
    public function testSavePrevalueEditor()
    {
        $this->assertInternalType('array', Model::savePrevalueEditor(Model::loadDatatype($this->object->getId())));
    }

    /**
     * Test
     *
     * @covers Gc\Datatype\Model::saveEditor
     *
     * @return void
     */
    public function testSaveEditor()
    {
        $propertyModel = PropertyModel::fromArray(
            array(
                'datatype_id' => 1,
                'document_id' => 1,
                'tab_id' => 1,
                'name' => 'PropertyTest',
                'identifier' => 'PropertyTest',
                'description' => 'PropertyTest',
                'required' => true,
                'sort_order' => 1,
            )
        );

        $this->assertFalse(Model::saveEditor($propertyModel));
        $propertyModel->isRequired(false);
        $this->assertTrue(Model::saveEditor($propertyModel));
    }

    /**
     * Test
     *
     * @covers Gc\Datatype\Model::loadPrevalueEditor
     *
     * @return void
     */
    public function testLoadPrevalueEditor()
    {
        $this->assertInstanceOf(
            'Zend\Form\Fieldset',
            Model::loadPrevalueEditor(Model::loadDatatype($this->object->getId()))
        );
    }

    /**
     * Test
     *
     * @covers Gc\Datatype\Model::loadEditor
     *
     * @return void
     */
    public function testLoadEditor()
    {
        $model = PropertyModel::fromArray(
            array(
                'datatype_id' => $this->object->getId(),
                'document_id' => 1,
            )
        );
        //Specific to Textstring editor
        $this->assertInstanceOf('Zend\Form\Element\Text', Model::loadEditor($model));
    }

    /**
     * Test
     *
     * @covers Gc\Datatype\Model::loadDatatype
     *
     * @return void
     */
    public function testLoadDatatype()
    {
        $this->assertInstanceOf('Gc\Datatype\AbstractDatatype', Model::loadDatatype($this->object->getId()));
    }
}
