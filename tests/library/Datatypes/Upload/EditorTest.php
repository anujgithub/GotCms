<?php

/**
 * This source file is part of GotCms.
 *
 * GotCms is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GotCms is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along
 * with GotCms. If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>.
 *
 * PHP Version >=5.3
 *
 * @category Gc_Tests
 * @package  Datatypes
 * @author   Pierre Rambaud (GoT) <pierre.rambaud86@gmail.com>
 * @license  GNU/LGPL http://www.gnu.org/licenses/lgpl-3.0.html
 * @link     http://www.got-cms.com
 */

namespace Datatypes\Upload;
use Gc\Media\File;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-17 at 20:42:12.
 *
 * @group Datatypes
 * @category Gc_Tests
 * @package  Datatypes
 */
class EditorTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Editor
     *
     * @return void
     */
    protected $object;

    /**
     * @var DocumentModel
     *
     * @return void
     */
     protected $document;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->property = $this->getMock(
            'Gc\Property\Model',
            array(
                'getName',
                'getId',
                'getValue',
            )
        );
        $this->property->expects($this->any())
            ->method('getName')
            ->will($this->returnValue('name'));
        $this->property->expects($this->any())
            ->method('getId')
            ->will($this->returnValue(1));
        $this->property->expects($this->any())
            ->method('getValue')
            ->will($this->returnValue($this->getValue()));

        $this->datatype = $this->getMock(
            'Datatypes\ImageCropper\Datatype',
            array(
                'getName',
                'getProperty',
                'getConfig',
                'setConfig',
                'getDocument',
            )
        );
        $this->datatype->expects($this->any())
            ->method('getName')
            ->will($this->returnValue('name'));
        $this->datatype->expects($this->any())
            ->method('getProperty')
            ->will($this->returnValue($this->property));

        $this->document = $this->getMock('Gc\Document\Model', array('getId'));
        $this->document->expects($this->any())
            ->method('getId')
            ->will($this->returnValue(1));
        $this->datatype->expects($this->any())
            ->method('getDocument')
            ->will($this->returnValue($this->document));

        $this->object = new Editor($this->datatype);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    protected function tearDown()
    {
        $_FILES = array();
        $_POST  = array();

        unset($this->object);
    }

    /**
     * Test
     *
     * @covers Datatypes\Upload\Editor::save
     *
     * @return void
     */
    public function testSave()
    {
        $this->datatype->expects($this->any())
            ->method('getConfig')
            ->will($this->returnValue($this->getConfig()));
        $_FILES = array(
            'name1' => array(
                'name' => __DIR__ . '/_files/test.jpg',
                'type' => 'plain/text',
                'size' => 8,
                'tmp_name' => __DIR__ . '/_files/test.jpg',
                'error' => 0
            )
        );

        $this->object->save();
        $result = $this->object->getValue();
        $this->removeDirectories();

        $this->assertInternalType('string', $this->object->getValue());
    }

    /**
     * Test
     *
     * @covers Datatypes\Upload\Editor::save
     *
     * @return void
     */
    public function testSaveWithEmptyFilesVar()
    {
        $this->datatype->expects($this->any())
            ->method('getConfig')
            ->will($this->returnValue(array('is_multiple' => true, 'mime_list' => array())));
        $this->object->getRequest()->getPost()->set('name1-hidden', '1');
        $this->assertNull($this->object->save());
    }

    /**
     * Test
     *
     * @covers Datatypes\Upload\Editor::save
     *
     * @return void
     */
    public function testSaveWithWrongMimeType()
    {
        $this->datatype->expects($this->any())
            ->method('getConfig')
            ->will($this->returnValue($this->getConfig()));
        $_FILES = array(
            'name1' => array(
                'name' => __DIR__ . '/_files/test.bmp',
                'type' => 'plain/text',
                'size' => 8,
                'tmp_name' => __DIR__ . '/_files/test.bmp',
                'error' => 0
            )
        );

        $this->object->save();
        $result = $this->object->getValue();
        $this->removeDirectories();

        $this->assertInternalType('string', $result);
    }

    /**
     * Test
     *
     * @covers Datatypes\Upload\Editor::load
     *
     * @return void
     */
    public function testLoad()
    {
        $config = $this->getConfig();
        $config['is_multiple'] = true;
        $this->datatype->expects($this->any())
            ->method('getConfig')
            ->will($this->returnValue($config));
        $this->assertInternalType('array', $this->object->load());
    }

    /**
     * Remove directories
     *
     * @return mixed
     */
    protected function removeDirectories()
    {
        $file = new File();
        $file->load($this->property, $this->document);
        $dir = $file->getPath() . $file->getDirectory();
        if (is_dir($dir)) {
            $data = glob($dir . '/*');
            foreach ($data as $file) {
                unlink($file);
            }

            $tmpDir = $dir;
            while ($tmpDir != GC_MEDIA_PATH . '/files') {
                rmdir($tmpDir);
                $tmpDir = realpath(dirname($tmpDir));
            }
        }
    }

    protected function getValue()
    {
        return serialize(
            array(
                'original' => array(
                    'value' => '/media/files/test/test.jpg',
                    'width' => 10,
                    'height' => 10,
                    'html' => 2,
                    'mime' => 'image/jpeg',
                ),
                '223x112' => array(
                    'value' => '/media/files/test/test-223x112.jpg',
                    'width' => 223,
                    'height' => 112,
                    'html' => 2,
                    'mime' => 'image/jpeg',
                    'x' => 0,
                    'y' => 0,
                ),
                '800x600' => array(
                    'value' => '/media/files/test/test.jpg',
                    'width' => 223,
                    'height' => 112,
                    'html' => 2,
                    'mime' => 'image/jpeg',
                    'x' => 0,
                    'y' => 0,
                ),
            )
        );
    }

    protected function getConfig()
    {
        return array(
            'is_multiple' => false,
            'mime_list' => array(
                'image/gif',
                'image/jpeg',
                'image/png',
            )
        );
    }
}
