<?php
/**
 * This source file is part of GotCms.
 *
 * GotCms is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * GotCms is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along
 * with GotCms. If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>.
 *
 * PHP Version >=5.3
 *
 * @category Gc_Tests
 * @package  Datatypes
 * @author   Pierre Rambaud (GoT) <pierre.rambaud86@gmail.com>
 * @license  GNU/LGPL http://www.gnu.org/licenses/lgpl-3.0.html
 * @link     http://www.got-cms.com
 */

namespace Datatypes\Textrich;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-10-17 at 20:42:12.
 *
 * @group Datatypes
 * @category Gc_Tests
 * @package  Datatypes
 */
class EditorTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Editor
     *
     * @return void
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $property = $this->getMock(
            'Gc\Property\Model',
            array(
                'getName',
                'getId',
                'getValue',
                'getConfig',
            )
        );
        $property->expects($this->any())
            ->method('getName')
            ->will($this->returnValue('name'));
        $property->expects($this->any())
            ->method('getId')
            ->will($this->returnValue(1));

        $this->datatype = $this->getMock(
            'Datatypes\Mixed\Datatype',
            array(
                'getName',
                'getProperty',
                'getConfig',
                'setConfig',
                'getHelper',
            )
        );
        $this->datatype->expects($this->any())
            ->method('getName')
            ->will($this->returnValue('name'));
        $this->datatype->expects($this->any())
            ->method('getProperty')
            ->will($this->returnValue($property));

        $helperManager = $this->getMock('Zend\View\HelperManager', array('appendFile', 'appendStylesheet'));
        $helperManager->expects($this->any())
            ->method('appendFile')
            ->will($this->returnValue('string'));
        $helperManager->expects($this->any())
            ->method('appendStylesheet')
            ->will($this->returnValue('string'));

        $this->datatype->expects($this->any())
            ->method('getHelper')
            ->will($this->returnValue($helperManager));

        $this->object = new Editor($this->datatype);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    protected function tearDown()
    {
        unset($this->object);
    }

    /**
     * Test
     *
     * @covers Datatypes\Textrich\Editor::save
     *
     * @return void
     */
    public function testSave()
    {
        $this->datatype->expects($this->any())
            ->method('getConfig')
            ->will($this->returnValue(
                array(
                    'toolbar-items' => array(
                        'Source' => '1',
                        'Save' => '1',
                        'NewPage' => '1',
                        'DocProps' => '1',
                        'Preview' => '1',
                        'Print' => '1',
                        'Templates' => '1',
                        'Cut' => '1',
                        'Copy' => '1',
                        'Paste' => '1',
                        'PasteText' => '1',
                        'PasteFromWord' => '1',
                        'Undo' => '1',
                        'Redo' => '1',
                        'Find' => '1',
                        'Replace' => '1',
                        'SelectAll' => '1',
                        'SpellChecker' => '1',
                        'Scayt' => '1',
                        'Form' => '1',
                        'Checkbox' => '1',
                        'Radio' => '1',
                        'TextField' => '1',
                        'Textarea' => '1',
                        'Select' => '1',
                        'Button' => '1',
                        'ImageButton' => '1',
                        'HiddenField' => '1',
                        'Bold' => '1',
                        'Italic' => '1',
                        'Underline' => '1',
                        'Strike' => '1',
                        'Subscript' => '1',
                        'Superscript' => '1',
                        'RemoveFormat' => '1',
                        'NumberedList' => '1',
                        'BulletedList' => '1',
                        'Outdent' => '1',
                        'Indent' => '1',
                        'Blockquote' => '1',
                        'CreateDiv' => '1',
                        'JustifyLeft' => '1',
                        'JustifyCenter' => '1',
                        'JustifyRight' => '1',
                        'JustifyBlock' => '1',
                        'BidiLtr' => '1',
                        'BidiRtl' => '1',
                        'Link' => '1',
                        'Unlink' => '1',
                        'Anchor' => '1',
                        'Image' => '1',
                        'Flash' => '1',
                        'Table' => '1',
                        'HorizontalRule' => '1',
                        'Smiley' => '1',
                        'SpecialChar' => '1',
                        'PageBreak' => '1',
                        'Iframe' => '1',
                        'Styles' => '1',
                        'Format' => '1',
                        'Font' => '1',
                        'FontSize' => '1',
                        'TextColor' => '1',
                        'BGColor' => '1',
                        'Maximize' => '1',
                        'ShowBlocks' => '1',
                        'About' => '1',
                    ),
                )
            ));
        $this->object->getRequest()->getPost()->set($this->object->getName(), '1');
        $this->assertNull($this->object->save());
    }

    /**
     * Test
     *
     * @covers Datatypes\Textrich\Editor::load
     *
     * @return void
     */
    public function testLoad()
    {
        $this->assertInternalType('array', $this->object->load());
    }

    /**
     * Test
     *
     * @covers Datatypes\Textrich\Editor::load
     *
     * @return void
     */
    public function testLoadWithEmptyConfig()
    {
        $this->datatype->expects($this->any())
            ->method('getConfig')
            ->will($this->returnValue(null));
        $this->assertInternalType('array', $this->object->load());
    }
}
